// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// soft_cluster
arma::mat soft_cluster(const arma::mat& Y, const arma::mat& Z, float sigma);
RcppExport SEXP _symphony_soft_cluster(SEXP YSEXP, SEXP ZSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_cluster(Y, Z, sigma));
    return rcpp_result_gen;
END_RCPP
}
// compute_ref_cache
List compute_ref_cache(const arma::mat& Rr, const arma::mat& Zr);
RcppExport SEXP _symphony_compute_ref_cache(SEXP RrSEXP, SEXP ZrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Rr(RrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Zr(ZrSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ref_cache(Rr, Zr));
    return rcpp_result_gen;
END_RCPP
}
// moe_correct_ref
arma::mat moe_correct_ref(const arma::mat& Zq, const arma::mat& Xq, const arma::mat& Rq, const arma::vec& Nr, const arma::mat& RrZtr);
RcppExport SEXP _symphony_moe_correct_ref(SEXP ZqSEXP, SEXP XqSEXP, SEXP RqSEXP, SEXP NrSEXP, SEXP RrZtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Zq(ZqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xq(XqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Rq(RqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Nr(NrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type RrZtr(RrZtrSEXP);
    rcpp_result_gen = Rcpp::wrap(moe_correct_ref(Zq, Xq, Rq, Nr, RrZtr));
    return rcpp_result_gen;
END_RCPP
}
// get_betas
arma::cube get_betas(const arma::mat& R, const arma::mat& Z, const arma::mat& lambda, const arma::mat& design);
RcppExport SEXP _symphony_get_betas(SEXP RSEXP, SEXP ZSEXP, SEXP lambdaSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(get_betas(R, Z, lambda, design));
    return rcpp_result_gen;
END_RCPP
}
// cosine_normalize_cpp
arma::mat cosine_normalize_cpp(arma::mat& V, int dim);
RcppExport SEXP _symphony_cosine_normalize_cpp(SEXP VSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_normalize_cpp(V, dim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_symphony_soft_cluster", (DL_FUNC) &_symphony_soft_cluster, 3},
    {"_symphony_compute_ref_cache", (DL_FUNC) &_symphony_compute_ref_cache, 2},
    {"_symphony_moe_correct_ref", (DL_FUNC) &_symphony_moe_correct_ref, 5},
    {"_symphony_get_betas", (DL_FUNC) &_symphony_get_betas, 4},
    {"_symphony_cosine_normalize_cpp", (DL_FUNC) &_symphony_cosine_normalize_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_symphony(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
